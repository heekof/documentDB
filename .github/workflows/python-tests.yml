# .github/workflows/python-tests.yml

name: Python Tests CI # Name of the workflow displayed on GitHub Actions tab

# Controls when the workflow will run
on:
  push: # Run on pushes to any branch
    branches: [ main ] # Or specify branches like [ main, develop ]
  pull_request: # Also run on pull requests targeting specified branches
    branches: [ main ] # Or specify branches like [ main, develop ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  test: # Define a job named 'test'
    runs-on: ubuntu-latest # Use the latest Ubuntu runner provided by GitHub

    strategy:
      fail-fast: false # Don't cancel other jobs in the matrix if one fails
      matrix:
        # Define different Python versions to test against
        python-version: [ "3.8", "3.9", "3.10", "3.11", "3.12" ] # Adjust as needed

    steps:
      # 1. Get the code from the repository
      - name: Check out code
        uses: actions/checkout@v4 # Standard action to checkout repo content

      # 2. Set up the specified Python version from the matrix
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # 3. Install dependencies (if any)
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # If you have dependencies listed in requirements.txt:
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # If you have development/test dependencies in a separate file:
          # if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          # Add any other specific package installations needed for tests here
          # e.g., pip install pytest # if you were using pytest

      # 4. Run the unit tests
      #    'python -m unittest discover' automatically finds tests (usually test_*.py files)
      #    The '-v' flag adds verbosity to the output
      #    If your tests are NOT in the root or discoverable directly, you might need:
      #    python -m unittest discover -s tests -v  (if tests are in a 'tests/' dir)
      - name: Run tests with unittest
        run: |
          python -m unittest discover -v